.data 
POSICAO_SORVETE: .half 144, 160
SENTIDO: .word 0
CONTADOR_HORIZONTAL: .byte 10
CONTADOR_VERTICAL: .byte 4
NUM: .word 111
NOTAS: 52,1292,50,258,52,258,55,1551,55,258,57,258,59,1551,59,258,60,258,57,2068,47,258,52,1292,50,258,52,258,55,1551,55,258,57,258,59,1551,55,258,62,258,60,2584,52,129,52,258,52,258,52,258,50,129,52,258,53,775,52,129,52,258,52,258,52,258,50,129,52,258,53,775,50,129,50,258,50,258,50,258,50,129,50,258,53,775,48,129,48,258,48,258,48,258,48,129,50,258,48,258,47,516,52,129,52,258,52,258,52,258,50,129,52,258,53,775,52,129,52,258,52,258,52,258,50,129,52,258,53,775,50,129,50,258,50,258,50,258,50,129,50,258,53,775,48,129,48,258,48,258,48,258,48,129,50,258,48,258,47,516,48,129,48,258,48,258,48,258,48,129,50,258,48,258,47,516,48,129,48,258,48,258,48,258,48,129,50,258,48,258,47,516,48,129,48,258,48,258,48,258,48,129,50,258,48,258,47,516,48,129,48,258,48,258,48,258,48,129,50,258,48,258,47,258
ANTIGA_POS_SORVETE: .half 144,160
.include "mapa.data"
.include "frente1.data"
.include "direita1.data"
.include "costas1.data"
.include "esquerda1.data"
.include "bloco_de_gelo.data"
.include "gf1.data"
.include "gf2.data"
.include "gf3.data"
.include "gf4.data"
.include "gf5.data"


.text
	j SETUP
	la s0,NUM		# define o endereï¿½o do nï¿½mero de notas
	lw s1,0(s0)		# le o numero de notas
	la s0,NOTAS		# define o endereï¿½o das notas
	li t0,0			# zera o contador de notas
	li a2,68		# define o instrumento
	li a3,127		# define o volume

MUSICA:	beq t0,s1, FIM_MUSICA		# contador chegou no final? entï¿½o  vï¿½ para FIM
	lw a0,0(s0)		# le o valor da nota
	lw a1,4(s0)		# le a duracao da nota
	li a7,31		# define a chamada de syscall
	ecall			# toca a nota
	mv a0,a1		# passa a duraï¿½ï¿½o da nota para a pausa
	li a7,32		# define a chamada de syscal 
	ecall			# realiza uma pausa de a0 ms
	addi s0,s0,8		# incrementa para o endereï¿½o da prï¿½xima nota
	addi t0,t0,1		# incrementa o contador de notas
	j GAME_LOOP		# volta ao loop
	
FIM_MUSICA:	li a0,40		# define a nota
		li a1,1500		# define a duraï¿½ï¿½o da nota em ms
		li a2,127		# define o instrumento
		li a3,127		# define o volume
		li a7,33		# define o syscall
		ecall			# toca a nota
		
		
SETUP:		la a0, mapa
		li a1, 0
		li a2, 0
		li a3, 0
		call PRINT
		li a3, 1
		call PRINT
		# a0 = endereÃ§o da imagem
		# a1 = x (coluna)
		# a2 = y (linha)
		# a3 = frame (0 ou 1)
		# t0 = endereÃ§o do bitmap display
		# t1 = endereÃ§o da img
		# t2 = contador da linha
		# t3 = contador da coluna
		# t4 = largura
		# t5 = altura
		
		# carrega o sentido para o qual o personagem está olhando(inicialmente, para frente)
		la t0, frente1
		la t1, SENTIDO
		sw t0, 0(t1)		
		
GAME_LOOP:	call TECLA_PRESS #chama o procedimento que verifica se a tecla estï¿½ sendo pressionada
		xori s0,s0,1 #alternador de frames
		
		la t1, SENTIDO
		lw a0, 0(t1)
		la t0,POSICAO_SORVETE
		lh a1,0(t0)
		lh a2,2(t0)
		mv a3,s0
		call PRINT
		
		li t0,0xFF200604 # alterador de frames
		sw s0,0(t0)
		
		la t0,ANTIGA_POS_SORVETE
		la a0, bloco_de_gelo # geraÃ§Ã£o do personagem
		lh a1,0(t0)
		lh a2,2(t0)
		mv a3,s0
		xori a3, a3, 1
		call PRINT
		
		j GAME_LOOP
		
TECLA_PRESS:	li t1,0xFF200000	# carrega o endereï¿½o de controle do KDMMIO
		lw t0,0(t1)			# Le bit de Controle Teclado
		andi t0,t0,0x0001		# mascara o bit menos significativo
	   	beq t0,zero,RETURN   	   	# Se nï¿½o hï¿½ tecla pressionada entï¿½o vai para FIM
	  	lw t2,4(t1)  			# le o valor da tecla tecla
		
		li t0,'w'
		beq t2,t0,ANDA_CIMA #se a tecla pressionada for w, anda para cima
		li t0,'s'
		beq t2,t0,ANDA_BAIXO #se a tecla pressionada for s, anda para baixo
		li t0,'a'
		beq t2,t0,ANDA_ESQ #se a tecla pressionada for a, anda para esquerda
		li t0,'d'
		beq t2,t0,ANDA_DIR #se a tecla pressionada for d, anda para a direita
		li t0, ' '
		beq t2, t0, GELO
				
RETURN: 	ret

ANDA_CIMA:	# mudança da direção p onde o personagem ta olhando
		la t0, costas1
		la t1, SENTIDO
		sw t0, 0(t1)

		la t0, CONTADOR_VERTICAL
		lb t1, 0(t0)
		li t2, 14
		beq t1, t2, GAME_LOOP
		
		#aumento do contador horizontal em 1
		la t0, CONTADOR_VERTICAL
		lb t1, 0(t0)
		addi t1, t1, 1
		sb t1, 0(t0)
		
		la t0,POSICAO_SORVETE

		la t1,ANTIGA_POS_SORVETE #cï¿½digo para salvar a antiga posiï¿½ï¿½o do personagem e substituï¿½la por um recorte do fundo
		lw t2,0(t0)
		sw t2,0(t1)
		
		lh t1,2(t0)
		addi t1,t1,-16
		sh t1,2(t0)
		ret				# retorna

ANDA_BAIXO:	# mudança da direção p onde o personagem ta olhando
		la t0, frente1
		la t1, SENTIDO
		sw t0, 0(t1)

		la t0, CONTADOR_VERTICAL
		lb t1, 0(t0)
		beqz t1, GAME_LOOP
		
		#subtração do contador horizontal em 1
		la t0, CONTADOR_VERTICAL
		lb t1, 0(t0)
		addi t1, t1, -1
		sb t1, 0(t0)

		la t0,POSICAO_SORVETE
		la t1,ANTIGA_POS_SORVETE #cï¿½digo para salvar a antiga posiï¿½ï¿½o do personagem e substituï¿½la por um recorte do fundo
		lw t2,0(t0)
		sw t2,0(t1)
		
		lh t1,2(t0)
		addi t1,t1,16
		sh t1,2(t0)
		ret
		
ANDA_DIR:	# mudança da direção p onde o personagem ta olhando
		la t0, direita1
		la t1, SENTIDO
		sw t0, 0(t1)

		la t0, CONTADOR_HORIZONTAL
		lb t1, 0(t0)
		li t2, 18
		beq t1, t2, GAME_LOOP

		# aumentar o contador_hoizontal em 1
		la t0, CONTADOR_HORIZONTAL
		lb t1, 0(t0)
		addi t1, t1, 1
		sb t1, 0(t0)

		la t0,POSICAO_SORVETE
		la t1,ANTIGA_POS_SORVETE #cï¿½digo para salvar a antiga posiï¿½ï¿½o do personagem e substituï¿½la por um recorte do fundo
		lw t2,0(t0)
		sw t2,0(t1)
		
		lh t1,0(t0)
		addi t1,t1,16
		sh t1,0(t0)
		ret
		
ANDA_ESQ:	# mudança da direção p onde o personagem ta olhando
		la t0, esquerda1
		la t1, SENTIDO
		sw t0, 0(t1)

		la t0, CONTADOR_HORIZONTAL
		lb t1, 0(t0)
		li t2, 3
		beq t1, t2, GAME_LOOP
		
		# diminuir o contador_hoizontal em 1
		la t0, CONTADOR_HORIZONTAL
		lb t1, 0(t0)
		addi t1, t1, -1
		sb t1, 0(t0)
		
		la t0,POSICAO_SORVETE
		la t1,ANTIGA_POS_SORVETE #cï¿½digo para salvar a antiga posiï¿½ï¿½o do personagem e substituï¿½la por um recorte do fundo
		lw t2,0(t0)
		sw t2,0(t1)
		
		lh t1,0(t0)
		addi t1,t1,-16
		sh t1,0(t0)
		ret
		
						
PRINT:		li t0, 0xFF0
		add t0, t0, a3
		slli t0, t0, 20
		add t0, t0, a1
		
		li t1, 320
		mul t1, t1, a2
		add t0, t0, t1
		addi t1, a0, 8
		# definiÃ§Ã£o do endereÃ§o da imagem
		
		#zerando os contadores
		mv t2, zero 
		mv t3, zero
		
		# definiÃ§Ã£o da largura e da altura
		lw t4, 0(a0)
		lw t5, 4(a0)
		
PRINT_LINHA:	lw t6, 0(t1)
		sw t6, 0(t0) # carrega o pixel na imagem
		
		addi t1, t1, 4 # vai pro proximo pixel
		addi t0, t0, 4
		
		addi t3, t3, 4 # incrementa o contador de coluna
		
		blt t3, t4, PRINT_LINHA # verifica se terminou de desenhar a linha
		
		addi t0, t0,  320 # pula p proxima linha
		sub t0, t0, t4 
		
		mv t3, zero # zero o contador de coluna
		addi t2, t2, 1 # 3 incrementa o contador de linha
		bgt t5, t2, PRINT_LINHA
		ret
		
GELO:		la t0,SENTIDO
		lw t1, 0(t0)
		la t2, frente1
		beq t1, t2, GELO_P_BAIXO
		
		ret 
		
GELO_P_BAIXO:	xori s0,s0,1 #alternador de frames
		la a0, gf1
		la t0, POSICAO_SORVETE
		lh a1, 0(t0)
		lh a2, 2(t0)
		mv a3, s0
		call PRINT
		
		li a7, 32
		li a0, 50
		ecall
		
		li t0,0xFF200604 # alterador de frames
		sw s0,0(t0)
		
		xori s0,s0,1 #alternador de frames
		la a0, gf2
		la t0, POSICAO_SORVETE
		lh a1, 0(t0)
		lh a2, 2(t0)
		mv a3, s0
		call PRINT
		
		li a7, 32
		li a0, 50
		ecall
		
		li t0,0xFF200604 # alterador de frames
		sw s0,0(t0)
		
		xori s0,s0,1 #alternador de frames
		la a0, gf3
		la t0, POSICAO_SORVETE
		lh a1, 0(t0)
		lh a2, 2(t0)
		mv a3, s0
		call PRINT
		
		li a7, 32
		li a0, 50
		ecall
		
		li t0,0xFF200604 # alterador de frames
		sw s0,0(t0)
		
		xori s0,s0,1 #alternador de frames
		la a0, gf4
		la t0, POSICAO_SORVETE
		lh a1, 0(t0)
		lh a2, 2(t0)
		mv a3, s0
		call PRINT
		
		li a7, 32
		li a0, 50
		ecall
		
		li t0,0xFF200604 # alterador de frames
		sw s0,0(t0)
		
		xori s0,s0,1 #alternador de frames
		la a0, gf5
		la t0, POSICAO_SORVETE
		lh a1, 0(t0)
		lh a2, 2(t0)
		mv a3, s0
		call PRINT
		
		li a7, 32
		li a0, 50
		ecall
		
		li t0,0xFF200604 # alterador de frames
		sw s0,0(t0)
		
		j GAME_LOOP
